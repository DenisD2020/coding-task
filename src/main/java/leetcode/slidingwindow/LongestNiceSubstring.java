/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package leetcode.slidingwindow;

import java.util.HashSet;
import java.util.Set;

/**
 * https://leetcode.com/problems/longest-nice-substring/
 * <p>
 * A string s is nice if, for every letter of the alphabet that s contains, it appears both in uppercase and lowercase. For example, "abABB" is nice because 'A' and 'a' appear, and 'B' and 'b' appear. However, "abA" is not because 'b' appears, but 'B' does not.
 * <p>
 * Given a string s, return the longest substring of s that is nice. If there are multiple, return the substring of the earliest occurrence. If there are none, return an empty string.
 * <p>
 * Example 1:
 * <p>
 * Input: s = "YazaAay"
 * Output: "aAa"
 * Explanation: "aAa" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.
 * "aAa" is the longest nice substring.
 * <p>
 * Example 2:
 * <p>
 * Input: s = "Bb"
 * Output: "Bb"
 * Explanation: "Bb" is a nice string because both 'B' and 'b' appear. The whole string is a substring.
 * Example 3:
 * <p>
 * Input: s = "c"
 * Output: ""
 * Explanation: There are no nice substrings.
 * <p>
 * <p>
 * Constraints:
 * <p>
 * 1 <= s.length <= 100
 * s consists of uppercase and lowercase English letters.
 */
public class LongestNiceSubstring {

    public static void main(String[] args) {
        System.out.println("result:" + new LongestNiceSubstring().longestNiceSubstring("YazaAay"));
        System.out.println("result:" + new LongestNiceSubstring().longestNiceSubstring("Bb"));
    }

    private Set<Character> lowerCase = new HashSet<>();
    private Set<Character> upperCase = new HashSet<>();

    public String longestNiceSubstring(String s) {

        String niceString = "";

        for (int j = 0; j < s.length(); j++) {
            lowerCase.clear();
            upperCase.clear();

            String substring = s.substring(j);

            String currentString = "";
            for (int i = 0; i < substring.length() ; i++) {
                char item = substring.charAt(i);
                currentString += item;
                if (Character.isUpperCase(item)) {
                    upperCase.add(item);
                } else {
                    lowerCase.add(item);
                }
                if (isNice(currentString) && currentString.length() >= 2 && currentString.length() > niceString.length()) {
                    niceString = currentString;
                }
            }
        }
        return niceString;
    }

    private boolean isNice(String currentString) {
        if (lowerCase.size() != upperCase.size()) {
            return false;
        }
        for (Character c : lowerCase) {
            if (!upperCase.contains(Character.toUpperCase(c))) {
                return false;
            }
        }
        return true;
    }
}
